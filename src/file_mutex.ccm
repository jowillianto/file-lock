module;
#include <atomic>
#include <expected>
#include <filesystem>
#include <optional>
#include <shared_mutex>
export module moderna.file_lock:file_mutex;
import :sys_call;

namespace moderna::file_lock {

  struct ref_counter {
    std::atomic<size_t> count;

    void increment() noexcept {
      count.fetch_add(1, std::memory_order_relaxed);
    }
    template <std::invocable F>
    std::optional<std::invoke_result_t<F>> decrement(F run_if_zero) noexcept {
      size_t current_count = 1;
      size_t desired_count = 0;
      while (count.compare_exchange_weak(
        current_count, desired_count, std::memory_order_acq_rel, std::memory_order_acquire
      )) {
        if (current_count == 0) return std::nullopt; /* Prevent overflow issues */
        desired_count = current_count - 1;
      }
      if (current_count == 1) {
        return run_if_zero();
      }
      return std::nullopt;
    }
  };
  struct atomic_control_block {
    std::shared_mutex mut;
    ref_counter counter;
  };
  template <bool use_expected> struct __file_mutex {
    /*
      This implements Lockable and SharedLockable as specified by std.
      SharedLockable : https://en.cppreference.com/w/cpp/named_req/SharedLockable
      Lockable: https://en.cppreference.com/w/cpp/named_req/Lockable

      The following functions CAN and will throw exceptions.
    */

    /*
      Unlocking a uniquely locked mutex is not a problem as there is only one holder. We do not even
      need to perform ref counting with this one as it will be nicely protected.
    */
    std::expected<void, int> unlock()
      requires(use_expected)
    {
      return cross_platform_adapter::unlock(__fd).transform([&]() mutable {
        std::unique_lock{__control_block->mut, std::adopt_lock};
      });
    }
    void unlock()
      requires(!use_expected)
    {
      return cross_platform_adapter::unlock(__fd)
        .transform([&]() mutable {
          std::unique_lock{__control_block->mut, std::adopt_lock};
        })
        .value();
    }

    /*
      Locking uniquely does not need protection and can be skipped.
    */
    std::expected<void, int> lock()
      requires(use_expected)
    {
      auto l = std::unique_lock{__control_block->mut};
      return cross_platform_adapter::lock_unique(__fd).transform([&]() mutable { l.release(); });
    }
    void lock()
      requires(!use_expected)
    {
      auto l = std::unique_lock{__control_block->mut};
      return cross_platform_adapter::lock_unique(__fd).transform([&]() mutable { l.release(); }
      ).value();
    }

    /*
      try locking uniquely does not need protection either and can be skipped.
    */
    std::expected<bool, int> try_lock()
      requires(use_expected)
    {
      auto l = std::unique_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_unique(__fd).transform([&](bool &&v) mutable {
        l.release();
        return v;
      });
    }

    bool try_lock()
      requires(!use_expected)
    {
      auto l = std::unique_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_unique(__fd)
        .transform([&](bool &&v) mutable {
          l.release();
          return v;
        })
        .value();
    }

    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - use a mutex to protect from conversion under multithreading condition.
      - syscall to lock_shared
      - increment counter
    */
    std::expected<void, int> lock_shared()
      requires(use_expected)
    {
      auto l = std::shared_lock{__control_block->mut};
      return cross_platform_adapter::lock_shared(__fd).transform([&]() mutable {
        __control_block->counter.increment();
        l.release();
      });
    }
    void lock_shared()
      requires(!use_expected)
    {
      auto l = std::shared_lock{__control_block->mut};
      return cross_platform_adapter::lock_shared(__fd)
        .transform([&]() mutable {
          __control_block->counter.increment();
          l.release();
        })
        .value();
    }
    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - use a mutex to protect from conversion under multithreading condition.
      - syscall to lock_shared
      - increment counter
    */
    std::expected<bool, int> try_lock_shared()
      requires(use_expected)
    {
      auto l = std::shared_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_shared(__fd).transform([&](bool &&v) mutable {
        __control_block->counter.increment();
        l.release();
        return v;
      });
    }
    bool try_lock_shared()
      requires(!use_expected)
    {
      auto l = std::shared_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_shared(__fd)
        .transform([&](bool &&v) mutable {
          __control_block->counter.increment();
          l.release();
          return v;
        })
        .value();
    }

    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - decrement counter 
      - perform system call if required
      - open the shared_lock on the current thread. 
      
      Since file_mutex is based on the file descriptor and not thread based. Hence, the following
      precautions are required : 
      When acquiring the shared_lock : 
      - acquire the shared_mutex first. 
      - acquire the file lock. (if the file lock is previously held by the current process, this is ok)
      - increment the counter
      When releasing : 
      - decrement counter, 
      - release the file lock if required (since one descriptor can only have one lock)
      - release the mutex. 

      The precautions are to ensure thread safety. 
    */
    std::expected<void, int> unlock_shared()
      requires(use_expected)
    {
      return __control_block->counter
        .decrement([&]() {
          return cross_platform_adapter::unlock(__fd).transform([&]() {
            std::shared_lock{__control_block->mut, std::adopt_lock};
          });
        })
        .value_or(std::expected<void, int>({}));
    }
    void unlock_shared()
      requires(!use_expected)
    {
      return __control_block->counter
        .decrement([&]() {
          return cross_platform_adapter::unlock(__fd).transform([&]() {
            std::shared_lock{__control_block->mut, std::adopt_lock};
          });
        })
        .value_or(std::expected<void, int>({}))
        .value();
    }
    /*
      Creates a duplicate copy of the current file mutex without preserving its lock status.
    */
    std::expected<__file_mutex, int> duplicate() {
      return create(__path);
    }

    ~__file_mutex()
      requires(!use_expected)
    {
      if (__fd != cross_platform_adapter::invalid_fd) {
        cross_platform_adapter::close_file(__fd).value();
      }
    }

    __file_mutex &operator=(const __file_mutex &) = delete;
    __file_mutex(const __file_mutex &) = delete;
    __file_mutex &operator=(__file_mutex &&o) {
      __path = std::move(o.__path);
      __control_block = std::move(o.__control_block);
      __fd = o.__fd;
      o.__fd = -1;
      return *this;
    }
    __file_mutex(__file_mutex &&o) :
      __path{std::move(o.__path)}, __control_block{std::move(o.__control_block)}, __fd{o.__fd} {
      o.__fd = -1;
    }

    static std::expected<__file_mutex, int> create(std::filesystem::path path) noexcept {
      return cross_platform_adapter::open_for_lock(path).transform(
        [&](cross_platform_adapter::file_t fd) {
          return __file_mutex{std::move(path), fd};
        }
      );
    }

  private:
    cross_platform_adapter::file_t __fd;
    std::filesystem::path __path;
    std::unique_ptr<atomic_control_block> __control_block;
    __file_mutex(std::filesystem::path path, cross_platform_adapter::file_t fd) :
      __path{std::move(path)}, __fd{fd}, __control_block{std::make_unique<atomic_control_block>()} {
    }
  };

  export using file_mutex = __file_mutex<false>;
  export using safe_file_mutex = __file_mutex<true>;
};