module;
#include <sys/fcntl.h>
#include <sys/file.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <filesystem>
#include <mutex>
#include <shared_mutex>
#include <unistd.h>
export module moderna.file_lock:basic_mutex;
import :shared_mutex;
import :sys_flock;
import :mutex_store;

namespace moderna::file_lock {
  static mutex_store global_store;
  export class file_mutex {
  private:
    sys_flock _file_lock;
    std::shared_ptr<std::shared_mutex> _mutex;

  public:
    /*
      Construct a file_mutex, note that however, it is possible to provide a mutex store but this is 
      not recommended unless specific capacity settings are going to be changed.
    */
    file_mutex(
      const std::filesystem::path &file_path, 
      mutex_store& store = global_store
    ) :
      _file_lock{file_path}, _mutex{store.get_mutex(file_path)} {}

    void lock() const {
      // This ensures that if _file_lock throws an exception. The mutex will not be corrupted.
      // i.e. in an indeterminate state.
      std::unique_lock l{ *_mutex };
      // Exception can be thrown here.
      _file_lock.lock();
      l.release();
    }
    void unlock() const {
      _file_lock.unlock();
      _mutex -> unlock();
    }
    bool try_lock() const noexcept {
      if (!_mutex -> try_lock()) return false;
      if (!_file_lock.try_lock()) {
        _mutex -> unlock();
        return false;
      }
      return true;
    }

    void lock_shared() const {
      // This ensures that if _file_lock throws an exception. The mutex will be unlocked to restore
      // the mutex state.
      std::shared_lock l{ *_mutex };
      // Exception can be thrown here
      _file_lock.lock_shared();
      l.release();
    }
    void unlock_shared() const {
      _file_lock.unlock_shared();
      _mutex -> unlock_shared();
    }
    bool try_lock_shared() const noexcept {
      if (!_mutex -> try_lock_shared()) return false;
      if (!_file_lock.try_lock_shared()) {
        _mutex -> unlock_shared();
        return false;
      }
      return true;
    }
  };
  static_assert(shared_mutex<file_mutex>);
};