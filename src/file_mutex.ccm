module;
#include <atomic>
#include <expected>
#include <filesystem>
#include <optional>
#include <shared_mutex>
export module moderna.file_lock:file_mutex;
import :sys_call;

namespace moderna::file_lock {

  struct ref_counter {
    std::atomic<size_t> count;

    void increment() noexcept {
      count.fetch_add(1, std::memory_order_relaxed);
    }
    template <std::invocable F>
    std::optional<std::invoke_result_t<F>> decrement(F run_if_zero) noexcept {
      size_t current_count = 1;
      size_t desired_count = 0;
      while (count.compare_exchange_weak(
        current_count, desired_count, std::memory_order_acq_rel, std::memory_order_acquire
      )) {
        if (current_count == 0) return std::nullopt; /* Prevent overflow issues */
        desired_count = current_count - 1;
      }
      if (current_count == 1) {
        return run_if_zero();
      }
      return std::nullopt;
    }
  };
  struct atomic_control_block {
    std::shared_mutex mut;
    ref_counter counter;
  };
  export struct file_mutex {
    /*
      This implements Lockable and SharedLockable as specified by std.
      SharedLockable : https://en.cppreference.com/w/cpp/named_req/SharedLockable
      Lockable: https://en.cppreference.com/w/cpp/named_req/Lockable

      The following functions CAN and will throw exceptions.
    */

    /*
      Unlocking a uniquely locked mutex is not a problem as there is only one holder. We do not even
      need to perform ref counting with this one as it will be nicely protected.
    */
    void unlock() {
      return cross_platform_adapter::unlock(__fd)
        .transform([&]() mutable {
          auto l = std::unique_lock{__control_block->mut, std::adopt_lock};
        })
        .transform_error([](auto &&e) -> bool { throw e; })
        .value();
    }
    void lock() {
      auto l = std::unique_lock{__control_block->mut};
      return cross_platform_adapter::lock_unique(__fd)
        .transform([&]() mutable { l.release(); })
        .transform_error([](auto &&e) -> bool { throw e; })
        .value();
    }

    bool try_lock() {
      auto l = std::unique_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_unique(__fd)
        .transform([&](bool &&v) mutable {
          l.release();
          return v;
        })
        .transform_error([](auto &&e) -> bool { throw e; })
        .value();
    }

    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - use a mutex to protect from conversion under multithreading condition.
      - syscall to lock_shared
      - increment counter
    */
    void lock_shared() {
      auto l = std::shared_lock{__control_block->mut};
      return cross_platform_adapter::lock_shared(__fd)
        .transform([&]() mutable {
          __control_block->counter.increment();
          l.release();
        })
        .transform_error([](auto &&e) -> bool { throw e; })
        .value();
    }
    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - use a mutex to protect from conversion under multithreading condition.
      - syscall to lock_shared
      - increment counter
    */
    bool try_lock_shared() {
      auto l = std::shared_lock{__control_block->mut, std::try_to_lock};
      if (!l) {
        return false;
      }
      return cross_platform_adapter::try_lock_shared(__fd)
        .transform([&](bool &&v) mutable {
          __control_block->counter.increment();
          l.release();
          return v;
        })
        .transform_error([](auto &&e) -> bool { throw e; })
        .value();
    }

    /*
      lock_shared needs to be protected since calls to the system call could possibly convert the
      lock type. Hence :
      - decrement counter
      - perform system call if required
      - open the shared_lock on the current thread.

      Since file_mutex is based on the file descriptor and not thread based. Hence, the following
      precautions are required :
      When acquiring the shared_lock :
      - acquire the shared_mutex first.
      - acquire the file lock. (if the file lock is previously held by the current process, this is
      ok)
      - increment the counter
      When releasing :
      - decrement counter,
      - release the file lock if required (since one descriptor can only have one lock)
      - release the mutex.

      The precautions are to ensure thread safety.
    */
    void unlock_shared() {
      __control_block->counter
        .decrement([&]() {
          return cross_platform_adapter::unlock(__fd).transform([&]() {
            auto l = std::shared_lock{__control_block->mut, std::adopt_lock};
          });
        })
        .transform([](auto &&v) { return v.transform_error([](auto &&e) -> bool { throw e; }); });
    }
    /*
      Creates a duplicate copy of the current file mutex without preserving its lock status.
    */
    std::expected<file_mutex, std::filesystem::filesystem_error> clone() {
      return create(__path);
    }

    file_mutex &operator=(file_mutex &&) = default;
    file_mutex(file_mutex &&o) = default;

    static std::expected<file_mutex, std::filesystem::filesystem_error> create(
      std::filesystem::path path
    ) {
      return cross_platform_adapter::open_for_lock(path).transform([&](auto &&fd) {
        return file_mutex{std::move(path), std::move(fd)};
      });
    }

  private:
    cross_platform_adapter::file_t __fd;
    std::filesystem::path __path;
    std::unique_ptr<atomic_control_block> __control_block;
    file_mutex(std::filesystem::path path, cross_platform_adapter::file_t fd) :
      __path{std::move(path)}, __fd{std::move(fd)},
      __control_block{std::make_unique<atomic_control_block>()} {}
  };
};