module;
#include <sys/fcntl.h>
#include <sys/file.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <filesystem>
#include <shared_mutex>
#include <unistd.h>
export module file_lock:basic_mutex;
import :shared_mutex;
import :sys_file_lock;

namespace file_lock {
  export class FileMutex {
  private:
    mutable std::shared_mutex _mutex;
    SysFileLock _file_lock;

  public:
    FileMutex(const std::filesystem::path &file_path) : _file_lock{file_path} {}

    void lock() const {
      _mutex.lock();
      _file_lock.lock();
    }
    void unlock() const {
      _file_lock.unlock();
      _mutex.unlock();
    }
    bool try_lock() const {
      if (!_mutex.try_lock()) return false;
      if (!_file_lock.try_lock()) {
        _mutex.unlock();
        return false;
      }
      return true;
    }

    void lock_shared() const {

      _file_lock.lock_shared();
    }
    void unlock_shared() const {

      _mutex.unlock_shared();
    }
    bool try_lock_shared() const {
      if (!_mutex.try_lock_shared()) return false;
      if (!_file_lock.try_lock_shared()) {
        _mutex.unlock_shared();
        return false;
      }
      return true;
    }
  };

  static_assert(SharedMutex<FileMutex>);
};