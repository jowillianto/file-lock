module;
#include <expected>
#include <filesystem>
export module moderna.file_lock:large_file_mutex;
import :file_mutex;
import :sys_call;

namespace moderna::file_lock {
  struct lf_mutex_data {
    std::filesystem::path fpath;
    file_mutex mut;
  };

  export struct lf_mutex {

    /*
      This implements Lockable and SharedLockable as specified by std.
      SharedLockable : https://en.cppreference.com/w/cpp/named_req/SharedLockable
      Lockable: https://en.cppreference.com/w/cpp/named_req/Lockable

      The following functions CAN and will throw exceptions.
    */
    void unlock() {
      return __data.mut.unlock();
    }
    void lock() {
      return __data.mut.lock();
    }
    bool try_lock() {
      return __data.mut.try_lock();
    }
    void lock_shared() {
      return __data.mut.lock_shared();
    }
    bool try_lock_shared() {
      return __data.mut.try_lock_shared();
    }
    void unlock_shared() {
      return __data.mut.unlock_shared();
    }

    std::expected<lf_mutex, std::filesystem::filesystem_error> clone() {
      return __data.mut.clone().transform([&](auto &&mut) {
        return lf_mutex{{.fpath{__data.fpath}, .mut{std::move(mut)}}};
      });
    }

    static std::expected<lf_mutex, std::filesystem::filesystem_error> create(
      std::filesystem::path path, std::string_view extension = ".sys_lock"
    ) {
      std::filesystem::path lock_path =
        std::filesystem::path{path}.replace_extension(path.extension().string().append(extension));
      return file_mutex::create(std::move(lock_path)).transform([&](auto &&mut) {
        return lf_mutex{{.fpath{std::move(path)}, .mut{std::move(mut)}}};
      });
    }

  private:
    lf_mutex_data __data;

    lf_mutex(lf_mutex_data data) : __data{std::move(data)} {}
  };

};