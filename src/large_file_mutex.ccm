module;
#include <filesystem>
#include <unistd.h>
export module file_lock:large_file_mutex;
import :shared_mutex;
import :basic_mutex;

namespace file_lock {
  export class LargeFileMutex {
    std::filesystem::path _file_path;
    std::filesystem::path _lock_file_path;
    BasicMutex _file_lock;

    public:
      LargeFileMutex(std::filesystem::path file_path) : 
        _file_path {std::move(file_path)},
        _lock_file_path {
          _file_path.parent_path() / (_file_path.stem().string() + ".sys_lock")
        },
        _file_lock { _lock_file_path }
      { }
      void lock () { _file_lock.lock(); }
      void unlock() { _file_lock.unlock(); }
      bool try_lock() { return _file_lock.try_lock(); }
      void lock_shared() {_file_lock.lock_shared(); }
      bool try_lock_shared() {return _file_lock.try_lock_shared(); }
      void unlock_shared() { _file_lock.unlock_shared(); }
  };

  static_assert (SharedMutex<LargeFileMutex>);
};