module;
#include <filesystem>
#include <unistd.h>
export module moderna.file_lock:large_file_mutex;
import :shared_mutex;
import :sys_file_lock;
import :basic_mutex;

namespace moderna::file_lock {
  export class LargeFileMutex {
  private:
    std::filesystem::path _file_path;
    std::filesystem::path _lock_file_path;
    FileMutex _file_lock;

  public:
    LargeFileMutex(const std::filesystem::path &file_path) :
      _file_path(file_path),
      _lock_file_path(file_path.parent_path() / (file_path.stem().string() + ".sys_lock")),
      _file_lock(_lock_file_path) {}

    void lock() const {
      _file_lock.lock();
    }
    void unlock() const {
      _file_lock.unlock();
    }
    bool try_lock() const {
      return _file_lock.try_lock();
    }

    void lock_shared() const {
      _file_lock.lock_shared();
    }
    void unlock_shared() const {
      _file_lock.unlock_shared();
    }
    bool try_lock_shared() const {
      return _file_lock.try_lock_shared();
    }
  };

  static_assert(SharedMutex<LargeFileMutex>);
};