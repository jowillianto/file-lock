module;
#include <sys/fcntl.h>
#include <sys/file.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <atomic>
#include <filesystem>
#include <source_location>
#include <system_error>
#include <unistd.h>
export module moderna.file_lock:sys_flock;
import :shared_mutex;

namespace moderna::file_lock {
  export class sys_flock {
  private:
    std::filesystem::path _file_path;
    mutable std::atomic<size_t> _holder_count;
    int _fd;

    void _throw_sys_error(int err_no, std::source_location loc = std::source_location::current())
      const {
      throw std::filesystem::filesystem_error{
        loc.function_name(), _file_path, std::error_code{err_no, std::generic_category()}
      };
    }
    void _open_file(int additional_flags) {
      _fd = open(_file_path.c_str(), O_RDWR | O_APPEND | O_CLOEXEC);
      if (_fd == -1) _throw_sys_error(errno);
    }
    void _validate_file_path() {
      // Checks if the filesystem is a directory
      if (std::filesystem::is_directory(_file_path))
        throw std::filesystem::filesystem_error{
          "points to a directory", _file_path, std::error_code{}
        };
      // Create the file if the file exists
      if (!std::filesystem::exists(_file_path)) {
        _fd = open(_file_path.c_str(), O_CREAT | O_RDWR, 0664);
        if (_fd == -1) _throw_sys_error(errno);
        close(_fd);
      }
    }
    void _decrement_holder_count() const {
      size_t expected_value = 1;
      if (_holder_count.compare_exchange_strong(
            expected_value, 0, std::memory_order::acq_rel, std::memory_order::relaxed
          )) {
        int lock_st = flock(_fd, LOCK_UN);
        if (lock_st == -1) {
          _increase_holder_count();
          _throw_sys_error(errno);
        }
      }
      else {
        _holder_count.fetch_sub(1, std::memory_order::acq_rel);
      }
    }
    void _increase_holder_count() const noexcept {
      _holder_count.fetch_add(1, std::memory_order::relaxed);
    }

  public:
    sys_flock(const std::filesystem::path &file_path) :
      _file_path{std::filesystem::absolute(file_path)} {
      _validate_file_path();
      _open_file(0);
    }

    void lock() const {
      int lock_st = flock(_fd, LOCK_EX);
      if (lock_st == -1) _throw_sys_error(errno);
      _increase_holder_count();
    }
    void unlock() const {
      _decrement_holder_count();
      // int lock_st = flock(_fd, LOCK_UN);
      // if (lock_st == -1) _throw_sys_error(errno);
    }
    bool try_lock() const noexcept {
      int lock_st = flock(_fd, LOCK_EX | LOCK_NB);
      if (lock_st != -1)
        _increase_holder_count();
      return lock_st != -1;
    }

    void lock_shared() const {
      int lock_st = flock(_fd, LOCK_SH);
      if (lock_st == -1) _throw_sys_error(errno);
      _increase_holder_count();
    }
    void unlock_shared() const {
      unlock();
    }
    bool try_lock_shared() const noexcept {
      int lock_st = flock(_fd, LOCK_SH | LOCK_NB);
      if (lock_st != -1)
        _increase_holder_count();
      return lock_st != -1;
    }

    /*
      Explicitly delete.
    */
    sys_flock &operator=(const sys_flock &other) = delete;
    sys_flock(const sys_flock &other) = delete;

    sys_flock &operator=(sys_flock &&other) {
      if (_fd != -1) {
        close(_fd);
        _fd = -1;
      }
      std::swap(_fd, other._fd);
      _file_path = std::move(other._file_path);
      return *this;
    }
    sys_flock(sys_flock &&other) {
      std::swap(_fd, other._fd);
      _file_path = std::move(other._file_path);
    }

    ~sys_flock() {
      if (_fd != -1) {
        int close_st = close(_fd);
        if (close_st == -1) _throw_sys_error(errno);
      }
    }
  };
  static_assert(shared_mutex<sys_flock>);
}