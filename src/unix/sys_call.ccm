module;
#include <sys/file.h>
#include <cerrno>
#include <cstring>
#include <expected>
#include <filesystem>
#include <stdexcept>
#include <system_error>
#include <unistd.h>
export module moderna.file_lock:sys_call;
import :unique_fd;
namespace moderna::file_lock {
  namespace fs = std::filesystem;
  static auto file_closer = [](int fd) { close(fd); };
  export struct cross_platform_adapter {
    using file_t = unique_fd<int, -1, decltype(file_closer)>;
    static int invalid_fd;
    static std::expected<file_t, fs::filesystem_error> open_for_lock(
      const std::filesystem::path &path
    ) {
      int fd = open(path.c_str(), O_RDWR | O_CREAT | O_APPEND, S_IRWXU);
      if (fd == -1) {
        int error_code = errno;
        return std::unexpected{fs::filesystem_error{
          strerror(error_code), std::error_code{error_code, std::system_category()}
        }};
      }
      return file_t{fd, file_closer};
    }
    static std::expected<void, std::runtime_error> lock_unique(const file_t &file) {
      int code = flock(file.get(), LOCK_EX);
      if (code == -1) {
        int error_code = errno;
        return std::unexpected{std::runtime_error{strerror(error_code)}};
      }
      return {};
    }
    static std::expected<void, std::runtime_error> lock_shared(const file_t &file) {
      int code = flock(file.get(), LOCK_SH);
      if (code == -1) {
        int error_code = errno;
        return std::unexpected{std::runtime_error{strerror(error_code)}};
      }
      return {};
    }
    static std::expected<bool, std::runtime_error> try_lock_unique(const file_t &file) {
      int code = flock(file.get(), LOCK_EX | LOCK_NB);
      if (code == 0) {
        return true;
      }
      int err_code = errno;
      if (err_code == EWOULDBLOCK) {
        return false;
      }
      return std::unexpected{std::runtime_error{strerror(err_code)}};
    }
    static std::expected<bool, std::runtime_error> try_lock_shared(const file_t &file) {
      int code = flock(file.get(), LOCK_SH | LOCK_NB);
      if (code == 0) {
        return true;
      }
      int err_code = errno;
      if (err_code == EWOULDBLOCK) {
        return false;
      }
      return std::unexpected{std::runtime_error{strerror(err_code)}};
    }
    static std::expected<void, std::runtime_error> unlock(const file_t &file) {
      int code = flock(file.get(), LOCK_UN);
      if (code == 0) {
        return {};
      }
      int err_code = errno;
      /*
        The file is unlocked basically hence unlock does the job.
      */
      if (err_code == EINVAL) {
        return {};
      }
      return std::unexpected{std::runtime_error{strerror(err_code)}};
    }
  };
  int cross_platform_adapter::invalid_fd = -1;
}